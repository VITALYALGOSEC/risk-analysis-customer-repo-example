name: AlgoSec Action
on: [pull_request]
jobs:
  changedfiles:
    runs-on: ubuntu-latest
    # Map a step output to a job output
    outputs:
      all: ${{ steps.changes.outputs.all}}
      terraform: ${{ steps.changes.outputs.terraform }}
      matrix: ${{ steps.changes.outputs.matrix }}
      debug: ${{ steps.check_debug.outputs.debug }}
    steps:
      # Make sure we have some code to diff.
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Check debug flag
        id: check_debug
        run: echo "::set-output debug=$(if [ -z ${{ secrets.ALGOSEC_IS_DEBUG }} ]; then echo false; else echo true; fi;)"

      - name: Get changed files
        id: changes
        # Set outputs using the command.
        run: |
          # Pull Request
          git fetch origin "${{ github.base_ref }}" --depth=1
          # Get the list of all changed resources
          diff_result=$(git diff --name-only "origin/${{ github.base_ref }}" ${{ github.sha }} )
          echo "Diff between origin/${{ github.base_ref }} and ${{ github.sha }}"

          # Extract terraform's files
          terraform_files=$(echo $diff_result | tr -s '[[:space:]]' '\n' | grep -o '.*\.tf$')
          echo "Changed Terraform's files: $terraform_files"

          #extract folders where the changed teraforms files are stored
          #and create json to proceed them in the matrix style
          matrix_output="{\"include\":[ "
          for line in in $terraform_files
          do 
            if [[ $line == *".tf"* ]];
            then
              echo "Working line: $line" 
              dir=$(dirname $line) 
              echo "extracted dir: $dir"
              matrix_output="$matrix_output{\"folder\":\"$dir\"},"
            fi
          done
          matrix_output="$matrix_output ]}"

          echo "Prepared working matrix: $matrix_output"
          echo "::set-output name=matrix::${matrix_output}"

  echomatrix:
    needs: [changedfiles]
    if: needs.changedfiles.outputs.debug == true
    runs-on: ubuntu-latest
    steps:
      - name: echo
        run: echo ${{ needs.changedfiles.outputs.matrix }}

  AlgoSec-Code-Analysis:
    runs-on: ubuntu-latest
    # require the first job to have ran
    needs: changedfiles
    strategy:
      matrix: ${{fromJson(needs.changedfiles.outputs.matrix)}}
    defaults:
      run:
        working-directory: ${{ matrix.folder }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        #Is required for the plan's command
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      ################################ Terraform steps ################################
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Fmt
        id: fmt
        run: terraform fmt -check -diff
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: terraform init -no-color
        continue-on-error: true

      - name: Terraform Validate
        if: steps.init.outcome != 'failure'
        id: validate
        run: terraform validate -no-color
        continue-on-error: true

      - name: Terraform Plan
        if: steps.init.outputs.exitcode == 0 && steps.validate.outputs.exitcode == 0
        id: plan
        run: terraform plan -input=false -no-color -out=/tmp/tf.out
        continue-on-error: true

      - name: Terraform Convert Plan to JSON
        if: steps.init.outputs.exitcode == 0 && steps.validate.outputs.exitcode == 0 && steps.plan.outputs.exitcode == 0
        id: plan_to_json
        run: terraform show -json /tmp/tf.out > /tmp/tf.json.out
        continue-on-error: true

      - name: Terraform Status
        id: status
        run: |
          init_status=${{ steps.init.outputs.exitcode }}
          validate_status=${{ steps.validate.outputs.exitcode }}
          plan_status=${{ steps.plan.outputs.exitcode }}

          status=$( if [[ $init_status -ne 0 || $validate_status -ne 0 || $plan_status -ne 0 ]]; then echo 1; else echo 0; fi )
          if [[ $init_status -ne 0 ]]
          # Check the teraform's init, validate and plan steps and initialize terraform_output and terraform_err environment variables
          then
            echo "Error in init step. Exit code $init_status."
            >&2 echo "${{ steps.init.outputs.stderr }}"
            echo "${{ steps.init.outputs.stdout }}"
          elif [[ $validate_status -ne 0 ]]
          then
            echo "Error in validate step. Exit code $validate_status."
            >&2 echo "${{ steps.validate.outputs.stderr }}"
            echo "${{ steps.validate.outputs.stdout }}"
          elif [[ $plan_status -ne 0 ]]
          then
            echo "Error in plan step. Exit code $plan_status."
            >&2 echo "${{ steps.plan.outputs.stderr }}"
            echo "${{ steps.plan.outputs.stdout }}"
          else
            echo "Terraform phase was completed successfully."
            >&2 echo "${{ steps.plan.outputs.stdout }}"
            echo "${{ steps.plan.outputs.stdout }}"
          fi

          echo "::set-output name=exitcode::${status}"

      - name: Echo status
        run: |
          echo "Terraform running status ${{ steps.status.outputs.exitcode }}"
          echo "Terraform running stderr ${{ steps.status.outputs.stderr }}"
          echo "Terraform running stdout ${{ steps.status.outputs.stdout }}"

      ################################ Aws steps ################################
      # - name: Generate uuid for tmp file name
      #   if: steps.status.outputs.exitcode == 0
      #   id: generate-uuid
      #   uses: filipstefansson/uuid-action@v1
      #   with:
      #     name: ${{ github.sha }}

      # - name: Copy tmp file into S3
      #   if: steps.status.outputs.exitcode == 0
      #   run: |
      #     cat /tmp/tf.json.out
      #     aws s3 cp /tmp/tf.json.out s3://vitalylanda-test/github-codeanalysis/tmp${{ steps.generate-uuid.outputs.uuid }}.out --metadata customer=${{ github.repository_owner }},action_id=${{ steps.generate-uuid.outputs.uuid }}

      # - name: Wait till analysis complete
      #   if: steps.status.outputs.exitcode == 0
      #   id: analysis_status
      #   shell: bash
      #   run: |
      #     for(( i=1; i<=10; i++ ))
      #     do
      #       output=$(curl -s "https://31p8mo93gl.execute-api.us-east-1.amazonaws.com/dev/response?customer=${{ github.repository_owner }}&action_id=${{ steps.generate-uuid.outputs.uuid }}");
      #       status=$(echo $output | jq -r '.message_found');
      #       if [ $status = "true" ]
      #         then
      #           result=$(echo $output | jq -r '.result');
      #           echo "full result: $result"
      #           result_success=$(echo $result | jq -r '.success')
      #           echo "sucess: $result_success"
      #           additions=$(echo $result | jq -r '.additions')
      #           echo "additions: $additions"
      #           analysis_state=$(cat output.txt | jq -r '.analysis_state')
      #           echo "analysis state: $analysis_state"
      #           analysis_result = ${result_success} && $analysis_state
      #           break
      #         else
      #           echo "The result is not ready yet" 
      #           sleep 30
      #       fi
      #     done

      #     if [ $status = "true" && $analysis_result = "true" ]
      #       then
      #         exit_code=0
      #         out = "The analysis process was completed successfully"
      #         if [ -z $additions ]
      #           out = $out'\n'$additions
      #         echo "::set-output name=stdout::${out}"
      #       else
      #         exit_code=1
      #         echo "::set-output name=stderr::$(printf "The analysis process failed.\nWith additional information: $additions\n")"
      #     fi

      #     echo "::set-output name=exitcode::${exit_code}"
      #     echo "::set-output name=report::${additions}"

      #     exit $exit_code
      #   continue-on-error: true

      # ################################ Update PR and complete the job ################################
      # - name: Comment on PR
      #   # update Pull Request by the operation status
      #   uses: actions/github-script@v5
      #   env:
      #     terraform_status: ${{ steps.status.outputs.exitcode }}
      #     analysis_status: ${{ steps.analysis_status.outputs.exitcode}}
      #     analysis_out: ${{ steps.analysis_status.outputs.stdout}}
      #     analysis_err: ${{ steps.analysis_status.outputs.stderr}}
      #     analysis_report: ${{ steps.analysis_status.outputs.report}}
      #   with:
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     script: |
      #       const CODE_BLOCK = '```';
      #       const terraform_result = '${ process.env.terraform_status } == 0 ' ? ':heavy_check_mark:' : ':x:';
      #       const analysis_result = '${ process.env.analysis_status } == 0' ? ':heavy_check_mark:' : ':x:';

      #       const output = `
      #       ### ${ interraform_result } Terraform Processing ⚙️
      #       <details><summary>Terraform Log</summary>
      #       Output

      #       ${ CODE_BLOCK }
      #       ${{ env.terraform_stdout }}
      #       ${ CODE_BLOCK }

      #       Errors

      #       ${ CODE_BLOCK }
      #       ${{ env.terraform_stderr }}
      #       ${ CODE_BLOCK }

      #       </details> <!-- End Format Logs -->

      #       ###  ${ analysis_result }: Code Analysis 🎨
      #       <details><summary>Logs</summary>
      #       Output

      #       ${ CODE_BLOCK }
      #       ${ process.env.analysis_out }
      #       ${ CODE_BLOCK }

      #       Errors

      #       ${ CODE_BLOCK }
      #       ${ process.env.analysis_err }
      #       ${ CODE_BLOCK }

      #       ${ process.env.analysis_report }

      #       </details>
      #       *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

      #       github.rest.issues.createComment({
      #         issue_number: context.issue.number,
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         body: output
      #       })

      # - name: Check Teraform results
      #   shell: bash
      #   run: |
      #     echo init ${{ steps.init.outputs.exitcode }}
      #     test ${{ steps.init.outputs.exitcode }} -eq 0
      #     echo validate ${{ steps.validate.outputs.exitcode }}
      #     test ${{ steps.validate.outputs.exitcode }} -eq 0
      #     echo plan ${{ steps.plan.outputs.exitcode }}
      #     test ${{ steps.plan.outputs.exitcode }} -eq 0
      #     echo analysis ${{ steps.analysis_status.outputs.exitcode }}
      #     test ${{ steps.analysis_status.outputs.exitcode }} -eq 0
