name: AlgoSec Action
on: [pull_request]
jobs:
  AlgoSec-Code-Analysis:
    runs-on: ubuntu-latest
    env:
      working_directory: ./tf-test
    defaults:
      run:
        working-directory: ${{ env.working_directory }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Format
        id: fmt
        run: |
          proc_output = $(terraform fmt -check)
          proc_output="${proc_output//'%'/'%25'}"
          proc_output="${proc_output//$'\n'/'%0A'}"
          proc_output="${proc_output//$'\r'/'%0D'}"
          echo "::set-output name=content::$proc_output"
        continue-on-error: true

      - run: echo stdout ${{ steps.fmt.outputs.stdout }}
      - run: echo stderr ${{ steps.fmt.outputs.stderr }}
      - run: echo exitcode ${{ steps.fmt.outputs.exitcode }}

      - name: Terraform Init
        id: init
        working-directory: ${{env.working_directory}}
        run: terraform init
      
      - name: Terraform Validate
        id: validate
        working-directory: ${{env.working_directory}}
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        working-directory: ${{env.working_directory}}
        run: terraform plan -no-color
        continue-on-error: true

      - uses: actions/github-script@v5
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            
            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      - name: Terraform Validation Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
