name: AlgoSec Action
on: [pull_request]
jobs:
  AlgoSec-Code-Analysis:
    runs-on: ubuntu-latest
    env:
      working_directory: ./tf-test
    defaults:
      run:
        working-directory: ${{ env.working_directory }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Terraform Fmt
        id: fmt
        run: terraform fmt -check -diff
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: terraform init -no-color
        continue-on-error: true

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        continue-on-error: true

      - name: Terraform Plan
        id: plan
        run: terraform plan -input=false -no-color
        continue-on-error: true

      - name: Comment on PR
        uses: actions/github-script@v5
        if: github.event_name == 'pull_request'
        env:
          format_out: ${{ steps.fmt.outputs.stdout }}
          format_err: ${{ steps.fmt.outputs.stderr }}
          init_out: ${{ steps.init.outputs.stdout }}
          init_err: ${{ steps.init.outputs.stderr }}
          validate_out: ${{ steps.validate.outputs.stdout }}
          validate_err: ${{ steps.validate.outputs.stderr }}
          plan: "${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const CODE_BLOCK = '```';
            const fmt_result = '${{ steps.fmt.outcome }}' === 'failure' ? ':x:' : ':heavy_check_mark:';
            const init_result = '${{ steps.init.outcome }}' === 'failure' ? ':x:' : ':heavy_check_mark:';
            const validate_result = '${{ steps.validate.outcome }}' === 'failure' ? ':x:' : ':heavy_check_mark:';
            const plan_result = '${{ steps.plan.outcome }}' === 'failure' ? ':x:' : ':heavy_check_mark:';
            const output = `
            ### :heavy_check_mark: Terraform Format and Style üé®
            <details><summary>Logs</summary>
            Output

            ${ CODE_BLOCK }diff
            ${ process.env.format_out }
            ${ CODE_BLOCK }
            
            Errors

            ${ CODE_BLOCK }
            ${ process.env.format_err }
            ${ CODE_BLOCK }
            
            </details> <!-- End Format Logs -->

            ### ${ init_result } Terraform Initialization ‚öôÔ∏è
            <details><summary>Logs</summary>
            Output

            ${ CODE_BLOCK }
            ${ process.env.init_out }
            ${ CODE_BLOCK }

            Errors

            ${ CODE_BLOCK }
            ${ process.env.init_err }
            ${ CODE_BLOCK }

            </details> <!-- End Init Logs -->
            
            ### ${ validate_result } Terraform Validation ü§ñ
            <details><summary>Logs</summary>
            Output
            
            ${ CODE_BLOCK }
            ${ process.env.validate_out }
            ${ CODE_BLOCK }
            
            Errors
            
            ${ CODE_BLOCK }
            ${ process.env.validate_err }
            ${ CODE_BLOCK }
            
            </details> <!-- End Validate Logs -->
            
            ### ${ plan_result } Terraform Plan üìñ
            <details><summary>Logs</summary>
            
            ${ CODE_BLOCK }terraform
            ${ process.env.plan }
            ${ CODE_BLOCK }
            
            </details>
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      

      - name: Check Teraform results
        shell: bash
        run: |
          echo init ${{ steps.init.outputs.exitcode }}
          test ${{ steps.init.outputs.exitcode }} -eq 0
          echo validate ${{ steps.validate.outputs.exitcode }}
          test ${{ steps.validate.outputs.exitcode }} -eq 0
          echo plan ${{ steps.plan.outputs.exitcode }}
          test ${{ steps.plan.outputs.exitcode }} -eq 0

      - name: Remove New Line
        id: plan_w_nl
        shell: bash
        run: |
          echo "${{ steps.plan.outputs.stdout }}"|tr '\n' ' '
        continue-on-error: true

#      - name: Convert Plan output to JSON
#        #There is a problem to pass multi-line text into
#        id: to_json
#        shell: bash
#        run: |
#          echo ${{ steps.plan_w_nl.outputs.stdout }} | jq  --raw-input .  | jq --slurp .
#        continue-on-error: true

      - name: Analyze Terraform output
        env:
          plan_out: ${{ steps.to_json.outputs.stdout }}
        run: |
          curl -X POST -H "Content-Type: application/json" -d "{'tf_output':'${{ steps.plan_w_nl.outputs.stdout }}'}" --url https://31p8mo93gl.execute-api.us-east-1.amazonaws.com/dev/webhook
        continue-on-error: true