name: AlgoSec Action
on: [ pull_request ]
jobs:
  changedfiles:
    runs-on: ubuntu-latest
    # Map a step output to a job output
    outputs:
      all: ${{ steps.changes.outputs.all}}
      terraform: ${{ steps.changes.outputs.terraform }}
      matrix: ${{ steps.changes.outputs.matrix }}
    steps:
      # Make sure we have some code to diff.
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Get changed files
        id: changes
        # Set outputs using the command.
        run: |
          # Pull Request
          git fetch origin "${{ github.base_ref }}" --depth=1
          # Get the list of all changed resources
          diff_result=$(git diff --name-only "origin/${{ github.base_ref }}" ${{ github.sha }} )
          echo "Diff between origin/${{ github.base_ref }} and ${{ github.sha }}"
          
          # Extract terraform's files
          terraform_files=$(echo $diff_result | tr -s '[[:space:]]' '\n' | grep -o '.*\.tf$')
          echo "Changed Terraform's files: $terraform_files"
          
          #extract folders where the changed teraforms files are stored
          #and create json to proceed them in the matrix style
          matrix_output="{\"include\":[ "
          for line in in $terraform_files
          do 
            if [[ $line == *".tf"* ]];
            then
              echo "Working line: $line" 
              dir="./"$(dirname $line) 
              echo "extracted dir: $dir"
              matrix_output="$matrix_output{\"folder\":\"$dir\"},"
            fi
          done
          matrix_output="$matrix_output ]}"
          
          echo "Prepared working matrix: $matrix_output"
          echo "::set-output name=matrix::${matrix_output}"

  echomatrix:
    needs: [changedfiles]
    runs-on: ubuntu-latest
    steps:
      - name: echo
        run: echo ${{ needs.changedfiles.outputs.matrix }}

  check_matrix:
    needs: [changedfiles]
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{fromJson(needs.changedfiles.outputs.matrix)}}
    defaults:
      run:
        working-directory: ${{ matrix.folder }}
    steps:
      # Make sure we have some code to diff.
      - name: Checkout repository
        uses: actions/checkout@v2

      -  name: echo
         run: echo ${{ matrix.folder }}

      - name: test
        working-directory: ${{ matrix.folder }}
        run: |
          ls -la
          pwd
#  AlgoSec-Code-Analysis:
#    runs-on: ubuntu-latest
#    # require the first job to have ran
#    needs: changedfiles
#    env:
#      working_directory: ./tf-test-sg
#    defaults:
#      run:
#        working-directory: ${{ env.working_directory }}
#
#    steps:
#      - name: Echo current folder
#        run: echo $PWD
#
#      - name: Check changed files
#        run: echo ${{needs.changedfiles.outputs.terraform}}
#
#      - name: Checkout
#        uses: actions/checkout@v2
#
#      - name: Configure AWS Credentials
#        #Is required for the plan's command
#        uses: aws-actions/configure-aws-credentials@v1
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: us-west-2
#
#      ################################ Terraform steps ################################
#      - name: Setup Terraform
#        uses: hashicorp/setup-terraform@v1
#        with:
#          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
#
#
#      - name: Terraform Fmt
#        id: fmt
#        run: terraform fmt -check -diff
#        continue-on-error: true
#
#      - name: Terraform Init
#        id: init
#        run: terraform init -no-color
#        continue-on-error: true
#
#      - name: Terraform Validate
#        id: validate
#        run: terraform validate -no-color
#        continue-on-error: true
#
#      - name: Terraform Plan
#        id: plan
#        run: terraform plan -input=false -no-color
#        continue-on-error: true
#
#
#      ################################ Aws steps ################################
#      - name: Generate uuid for tmp file name
#        id: generate-uuid
#        uses: filipstefansson/uuid-action@v1
#        with:
#          name: ${{ github.sha }}
#
#      - name: Store plan's output into file
#        # It's required to use this way to write the plan's output into file as a result that the output is multiline text
#        run: |
#          cat << EOF > tmp.out
#          ${{ steps.plan.outputs.stdout }}
#          EOF
#
#      - name: Copy tmp file into S3
#        run: |
#          aws s3 cp tmp.out s3://vitalylanda-test/github-codeanalysis/tmp${{ steps.generate-uuid.outputs.uuid }}.out --metadata customer=${{ github.repository_owner }},action_id=${{ steps.generate-uuid.outputs.uuid }}
#
#      - name: Wait till analysis complete
#        id: analysis_status
#        shell: bash
#        run: |
#          for(( i=1; i<=10; i++ ))
#          do
#            output=$(curl -s "https://31p8mo93gl.execute-api.us-east-1.amazonaws.com/dev/response?customer=${{ github.repository_owner }}&action_id=${{ steps.generate-uuid.outputs.uuid }}");
#            status=$(echo $output | jq -r '.message_found');
#            if [ $status = "true" ]
#              then
#                result=$(echo $output | jq -r '.result');
#                echo "full result: $result"
#                result_success=$(echo $result | jq -r '.success')
#                echo "sucess: $result_success"
#                additions=$(echo $result | jq -r '.additions')
#                echo "additions: $additions"
#                break
#              else
#                sleep 30
#            fi
#          done
#
#          if [ $result_success = "true" ]
#            then
#              exit_code=0
#            else
#              exit_code=1
#          fi
#
#          echo "::set-output name=analysis_state::${status}"
#          echo "::set-output name=analysis_result::${result_success}"
#          echo "::set-output name=analysis_addons::${additions}"
#          echo "::set-output name=exitcode::${exit_code}"
#
#          echo "::set-output name=stdout::$(echo "The analysis process was completed. \n Analyse succeeded: $result_success \n With additional information: $additions\n")"
#
#      ################################ Update PR and complete the job ################################
#      - name: Comment on PR
#        # update Pull Request by the operation status
#        uses: actions/github-script@v5
#        env:
#          format_out: ${{ steps.fmt.outputs.stdout }}
#          format_err: ${{ steps.fmt.outputs.stderr }}
#          init_out: ${{ steps.init.outputs.stdout }}
#          init_err: ${{ steps.init.outputs.stderr }}
#          validate_out: ${{ steps.validate.outputs.stdout }}
#          validate_err: ${{ steps.validate.outputs.stderr }}
#          analysis_out: ${{ steps.analysis_status.outputs.stdout}}
#          analysis_err: ${{ steps.analysis_status.outputs.stderr}}
#          plan: "${{ steps.plan.outputs.stdout }}"
#        with:
#          github-token: ${{ secrets.GITHUB_TOKEN }}
#          script: |
#            const CODE_BLOCK = '```';
#            const fmt_result = '${{ steps.fmt.outcome }}' === 'failure' ? ':x:' : ':heavy_check_mark:';
#            const init_result = '${{ steps.init.outcome }}' === 'failure' ? ':x:' : ':heavy_check_mark:';
#            const validate_result = '${{ steps.validate.outcome }}' === 'failure' ? ':x:' : ':heavy_check_mark:';
#            const plan_result = '${{ steps.plan.outcome }}' === 'failure' ? ':x:' : ':heavy_check_mark:';
#            const analysis_result = '${{ steps.analysis_status.outcome }}' === 'failure' ? ':x:' : ':heavy_check_mark:';
#
#            console.log('analysis completed ${{ steps.analysis_status.outputs.exitcode }}-${{ steps.analysis_status.outcome }} with output state=${{ steps.analysis_status.outputs.analysis_state }} result=${{ steps.analysis_status.outputs.analysis_result }} additionals=${{ steps.analysis_status.outputs.analysis_addons }}')
#
#            const output = `
#            ### :heavy_check_mark: Terraform Format and Style üé®
#            <details><summary>Logs</summary>
#            Output
#
#            ${ CODE_BLOCK }diff
#            ${ process.env.format_out }
#            ${ CODE_BLOCK }
#
#            Errors
#
#            ${ CODE_BLOCK }
#            ${ process.env.format_err }
#            ${ CODE_BLOCK }
#
#            </details> <!-- End Format Logs -->
#
#            ### ${ init_result } Terraform Initialization ‚öôÔ∏è
#            <details><summary>Logs</summary>
#            Output
#
#            ${ CODE_BLOCK }
#            ${ process.env.init_out }
#            ${ CODE_BLOCK }
#
#            Errors
#
#            ${ CODE_BLOCK }
#            ${ process.env.init_err }
#            ${ CODE_BLOCK }
#
#            </details> <!-- End Init Logs -->
#
#            ### ${ validate_result } Terraform Validation ü§ñ
#            <details><summary>Logs</summary>
#            Output
#
#            ${ CODE_BLOCK }
#            ${ process.env.validate_out }
#            ${ CODE_BLOCK }
#
#            Errors
#
#            ${ CODE_BLOCK }
#            ${ process.env.validate_err }
#            ${ CODE_BLOCK }
#
#            </details> <!-- End Validate Logs -->
#
#            ### ${ plan_result } Terraform Plan üìñ
#            <details><summary>Logs</summary>
#
#            ${ CODE_BLOCK }terraform
#            ${ process.env.plan }
#            ${ CODE_BLOCK }
#
#            </details> <!-- End Plan -->
#
#            ###  ${ analysis_result }: Code Analysis üé®
#            <details><summary>Logs</summary>
#            Output
#
#            ${ CODE_BLOCK }
#            ${ process.env.analysis_out }
#            ${ CODE_BLOCK }
#
#            Errors
#
#            ${ CODE_BLOCK }
#            ${ process.env.analysis_err }
#            ${ CODE_BLOCK }
#
#            </details>
#            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
#
#            github.rest.issues.createComment({
#              issue_number: context.issue.number,
#              owner: context.repo.owner,
#              repo: context.repo.repo,
#              body: output
#            })
#
#
#      - name: Check Teraform results
#        shell: bash
#        run: |
#          echo init ${{ steps.init.outputs.exitcode }}
#          test ${{ steps.init.outputs.exitcode }} -eq 0
#          echo validate ${{ steps.validate.outputs.exitcode }}
#          test ${{ steps.validate.outputs.exitcode }} -eq 0
#          echo plan ${{ steps.plan.outputs.exitcode }}
#          test ${{ steps.plan.outputs.exitcode }} -eq 0
#          echo analysis ${{ steps.analysis_status.outputs.exitcode }} - ${{ steps.plan.outputs.exitcode }}
#          # test ${{ steps.analysis_status.outputs.exitcode }} -eq 0